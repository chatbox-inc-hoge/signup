<?php
/**
 * Created by PhpStorm.
 * User: mkkn
 * Date: 2015/01/31
 * Time: 1:39
 */

namespace Chatbox\Auth\Providers;

use Chatbox\Auth\UserInterface;
use Chatbox\Auth\Eloquent\Auth as Model;
use Chatbox\Auth\Eloquent\LoginAttempt;

use Chatbox\Auth\Exceptions\TooManyFailureException;

use Chatbox\Input;

class PasswordProvider extends AuthProvider {

    protected $type = "password";

    protected $credential;

    protected $attemptTime;
    protected $attemptCount;
    protected $attemptKey;

    public function configure(array $config)
    {
        $this->credential = \Chatbox\Arr::get($config,"credential",[]);
        $this->attemptKey = \Chatbox\Arr::get($config,"attempt.key");
        $this->attemptTime = \Chatbox\Arr::get($config,"attempt.time",3*60*60);//3h
        $this->attemptCount = \Chatbox\Arr::get($config,"attempt.count",10);
    }

    public function getCredential(){
        $cred = [];
        foreach($this->credential as $key){
            $cred[$key] = Input::post($key);
        }
        $cred = sha1(json_encode($cred));
        return $cred;
    }

    public function getUser(UserInterface $user)
    {
        $this->checkAttempt();
        $authenUser = parent::getUser($user); // TODO: Change the autogenerated stub
        $this->resetAttempt();
        return $authenUser;
    }

    protected function checkAttempt(){
        if($key = $this->getLoginKey()){
            $count = LoginAttempt::check($key,$this->attemptTime);
            if($this->attemptCount < $count){
                throw new TooManyFailureException;
            }
            LoginAttempt::add($key);
        }
    }

    protected function resetAttempt(){
        if($key = $this->getLoginKey()){
            LoginAttempt::reset($key);
        }
    }

    protected function getLoginKey(){
        return Input::post($this->attemptKey);
    }


}